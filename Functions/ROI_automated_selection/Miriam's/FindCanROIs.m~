%function out = FindCanROIs(in,roi_mode)


%% Automatically find candidate ROIs
% Miriam Henning (15.05.17)
in=out;
nframes = in.xml.frames;
fps = in.xml.framerate;
 


%if(nargin==1)||((nargin==2)&&(~roi_mode))
    
% Peakiness measure (calculate dF/F, emphasizing excursions in
% flourescence)

% sliding average 

    ch1a=in.ch1a;
    Baseline=in.BaseLine; % this baseline is the pixelwise response 
    % to 100 frames to preceeding the stimulus 


    REF=mean(Baseline,3);
    dF=zeros(size(ch1a));

    for p=1:length(ch1a)

    F=(ch1a(:,:,p))./REF-1;
    
    dF(:,:,p)=F;
    
    end 
    
%     %Control for one pixel
%     figure
%     plot(squeeze(ch1a(1,1,:)))
%     hold on 
%     plot(squeeze(dF(1,1,:)))
    
    
    %% thresholding using Otsu' method, to identify pixels eligible for further analysis 
    %(non background pixels)
%   The algorithm assumes that the image contains two classes of pixels following bi-modal 
%   histogram (foreground pixels and background pixels), it then calculates the optimum
%   threshold separating the two classes so that their combined spread (intra-class variance) 
%   is minimal, or equivalently (because the sum of pairwise squared distances is constant),
%   so that their inter-class variance is maximal.

    [level, em] = graythresh(ch1a)
    
    BW = im2bw(ch1a(:,:,1),level);
    figure, imshow(BW)
    
   %% Separate recorded trace into traces of certain directions of moving stim 
   
   fstimval=in.fstimval; % average stimulus value per recorded frame 
   
   %Calculate average duration of each stimulus epoch 
   changes=diff(fstimval);
   ch=find(changes); 
   av=[];
   for pp=1:2:length(ch)-1
       v=length(ch(pp)+1:ch(pp+1)-1);
       av=[av,v];
   end
   dur=min(av);
  
   
   ep_all=[];  %ep contains the range of frames belonging to each stimulus epoch 
   
   for pp=1:2:length(ch)-1
       v=ch(pp)+1:ch(pp+1)-1;
       v=v(1:dur);
       ep_all=[ep_all,v'];
   end

   %% Calculate DSI, Pdir, ON/OFF resp
   % Compare each pixel reponse strength to one of the 4 directions of movements
   
  DSI=nan((size(ch1a(:,:,1)))); % will contain a Direction Selectivity Index for each Pixel
  Pdir=nan((size(ch1a(:,:,1)))); % will contain the preferred Direction of each Pixel
  TRespPD=nan(size(ch1a(:,:,1))); % will contain the timing of the Peak response to PD of each Pixel (relative to Stimulus onset)
  MaxRespPD=nan(size(ch1a(:,:,1))); % will contain the Maximum of the Peak response to PD of each Pixel
  ONorOFFpixel=nan(size(ch1a(:,:,1))); % will contain 0 for OFF (T5) and 1 for ON (T4) pixel 
  
  nomovement=find(diff(out.fstimpos1((ep_all(:,1))))==0);
  Resp_PDperPixel=nan(size(ch1a,1),size(ch1a,2),length(1:nomovement(1)-1));
  
  for p=1:size(ch1a,1)
       for pp=1:size(ch1a,2)
           
           if BW(p,pp)==1
               
               
               %Calculate a DSI for each Pixel 
               
               presp=squeeze(ch1a(p,pp,:));
               
%              presp_epoch=zeros(size(ep_all)); % includes the response of this 
               %pixel for all epochs of the different directions 
               
%                    for k=1:size(ep_all,2)
% 
%                     presp_epoch(:,k)=presp(ep_all(:,k));
%                     
%                    end 
                   
                   % Now average traces belonging to the same direction of movement 
                   Stim=fstimval(ep_all(2,:));
                   presp_dir=nan(dur,4);


                   for kk=1:4 % loop through 4 directions of moving stim
                   Double=find(Stim==kk);
                       if length(Double)>1 
                           allepochs=[];
                           for k=1:length(Double)
                           allepochs=[allepochs, presp(ep_all(:,Double(k)))];
                           end
                           presp_dir(:,kk)=mean(allepochs,2);
                       elseif length(Double)==0;
                           disp(['Error: No Stiumulus Type ' num2str(kk),' found, Stimulus length was too short!!!']);
                       else 
                           presp_dir(:,kk)= presp(ep_all(:,Double));

                       end 
                   end

                    % Check for responsivity 
                    % Only if a response to moving edge is visible to one
                    % direction 
                    responsivity = zeros(1,4);
                        for u=1:4
                             if max(presp_dir(:,u))> 5*std(presp_dir(:,u))
                                 responsivity(u)=1;
                             end
                        end 

                        if sum(responsivity)>0 

                        MAXdir=max(presp_dir);
                        [MAX,PD]=max(MAXdir);
                        % Calculate DSI by subtracting the ND=opposite direction of the PD = direction with maximal response 
                        if     PD==1;
                           ND=3;
                        elseif PD==2;
                           ND=4;
                        elseif PD==3;
                           ND=1;
                        elseif PD==4;
                           ND=2;
                        end 
      
                        DSI(p,pp)=(MAXdir(PD)-MAXdir(ND))/MAXdir(PD);
                        
                        %DSI(p,pp)=(max(MAXdir)-min(MAXdir))/(max(MAXdir));
                        
                        
                        Pdir(p,pp)= PD;
                        
                        
                        [M,Timing]=max(presp_dir(:,PD));  %hier vll noch intensity of response als Value dazu nehmen? 
                        TRespPD(p,pp)=Timing;
                        MaxRespPD(p,pp)=M;

                        end 
                         
                        
                   %% Now I just  try to half the Stimulus trace to divide into ON\OFF pixels (T4/T5)

                    % !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    % Better would be to look into the C++ code and look how edge stimkus is
                    % createt to know at which time point I have dark and when light edge
                    % !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                    % my hypothesis is that ON edge and OFF edge should be HALF /HALF of the
                    % stimulus (before I have to subtract the part where stimulus is not moving

                    stimuluspos=in.fstimpos1;


                    stimulus=stimuluspos(ep_all(:,1));
                    nomove=find(diff(stimulus)==0);   %finds the index where the position of the stimulus does not change(thus the stimulus is not moving)

                    Presp_nomov=presp_dir(1:nomove(1)-1,:);  %cuts off the part of response trace where the stimulus is not moving 

                    %Stimulusnomov=stimulus(1:nomove(1)-1,:); %to check if cut out correctly


                    OFFedge=Presp_nomov(1:length(Presp_nomov)/2,:);
                    ONedge= Presp_nomov(length(Presp_nomov)/2+1:length(Presp_nomov),:);

                    % Now separate pixels based on ON or OFF responses 
                    % Write a matrix containing a 0 for OFF and 1 for ON response 
                    % Compare response to PD between ON and OFF 
                    if Pdir(p,pp)>0
                    PDresp_OFF=OFFedge(:,Pdir(p,pp)); % take out preferred direction response
                    PDresp_ON=ONedge(:,Pdir(p,pp)); 
                    %save Responses of each pixel to PD 
                    
                    
                    Resp_PDperPixel(p,pp,:)=Presp_nomov(:,Pdir(p,pp));
                    

                        if max(PDresp_OFF)>1.4*max(PDresp_ON);

                            ONorOFFpixel(p,pp)=0;
                            


                        elseif 1.4*max(PDresp_OFF)< max(PDresp_ON);
                            
                            ONorOFFpixel(p,pp)=1;
                            

                        end
                    end
                    
                    
               end  
       end
  end
 
 %% plot result 
  
 Pdir_im=Pdir;      
 Pdir_im(find(isnan(Pdir_im)==1))=0; 
 figure
 subplot(1,2,1)
 imagesc(Pdir_im)
 subplot(1,2,2)
 imagesc(DSI)
 
 %% range = (1+25):(length(t)-60); taken for dark edge presentation taken from movedges_figure_v1.m 
 %Only take pixels with a DSI bigger than 0.3
 
P_DSItoosmall=find(DSI<0.25);
Pdirthresh=Pdir_im;
Pdirthresh(P_DSItoosmall)=0;
figure
imagesc(Pdirthresh)

%Example Pixel  :   [39 86] with DSI bigger than 0.5

%plot response 

PiTryresp=(squeeze(ch1a(59,122,:)));

piTryrespdir=zeros(size(ep_all)); % includes the response of this 
               %pixel for all epochs of the different directions 
               
              for k=1:size(ep_all,2)

              piTryrespdir(:,k)=PiTryresp(ep_all(:,k));
              end 
figure
subplot(2,1, 1)
plot(piTryrespdir)
subplot(2,1, 2)
bar(max(piTryrespdir))

%% Plot ONOFFmatrix 

ONorOFFpixel_im=ONorOFFpixel;

ONorOFFpixel_im(find(isnan(ONorOFFpixel_im)==1))=3;
figure;
subplot(1,2,1)
imagesc(ONorOFFpixel_im);

P_DSItoosmall=find(DSI<0.25);
PONOFFthresh=ONorOFFpixel_im;
PONOFFthresh(P_DSItoosmall)=3;

subplot(1,2,2)
imagesc(PONOFFthresh)


% Test if assignment of pixels worked out 

% Plot ON and OFF edge responses for either pixels assigned to on or off 
[OFFPixelsx,OFFPixelsy]=find(ONorOFFpixel==0);
[ONPixelsx,ONPixelsy]=find(ONorOFFpixel==1);
%[row,col]=find(...) 

%plot randomly 5 Pixelresponses that were assigned to be OFF pixels
Rand_OFFp=round(length(OFFPixelsx)*rand(1,5))
Rand_ONp=round(length(ONPixelsx)*rand(1,5));

figure
ii=1

for i=1:5;
    
subplot(5,2,ii)
Resp=squeeze(Resp_PDperPixel(OFFPixelsx(Rand_OFFp(i)),OFFPixelsy(Rand_OFFp(i)),:));
Resp2=Resp/max(Resp);
Resp2OFF=Resp2(1:length(Resp2)/2);
Resp2ON=Resp2(length(Resp2)/2+1:length(Resp2));

plot(Resp2OFF)
hold on 
plot(Resp2ON)


subplot(5,2,ii+1)
Resp=squeeze(Resp_PDperPixel(ONPixelsx(Rand_ONp(i)),ONPixelsy(Rand_ONp(i)),:));
Resp2=Resp/max(Resp);
plot(Resp2)
Resp2OFF=Resp2(1:length(Resp2)/2);
Resp2ON=Resp2(length(Resp2)/2+1:length(Resp2));

plot(Resp2OFF)
hold on 
plot(Resp2ON)


ii=ii+2;

end 


subplot(5,2,1)
title('OFF pixels')
legend('Response to OFF edge', 'Response to ON edge') 
subplot(5,2,2)
title('ON pixels')

         
%%                   
   

%% Now we use the Components that decribe each Pixel Response (calculated above)
% DSI = Direction Selectivity Index
% Pdir = Preferred Direction
% TRespPD = Timing of Response to PD
% MaxRespPD = Maximum of Response to PD 
% ONorOFFpixel = T4 ot T5 cell 
% X & 
% Y position 

% ... to calculate a cluster Analysis 
A=DSI>0.26;
B=~isnan(Pdir);
C=MaxRespPD>0.09;
D=~isnan(ONorOFFpixel);

CC=A.*B.*C.*D;

[relevantPixel_X,relevantPixel_Y]=find(CC);


Components=nan(length(relevantPixel_X),7);

% for ll=1:length(relevantPixel_X)
%     Try(relevantPixel_X(ll),relevantPixel_Y(ll))=1;  
% end
% imagesc(Try)
for ll=1:length(relevantPixel_X)
    
Components(ll,1)=DSI(relevantPixel_X(ll),relevantPixel_Y(ll));
Components(ll,2)=Pdir(relevantPixel_X(ll),relevantPixel_Y(ll));
Components(ll,3)=TRespPD(relevantPixel_X(ll),relevantPixel_Y(ll));
Components(ll,4)=MaxRespPD(relevantPixel_X(ll),relevantPixel_Y(ll));
Components(ll,5)=ONorOFFpixel(relevantPixel_X(ll),relevantPixel_Y(ll));

end 

Components(:,6)= relevantPixel_X;
Components(:,7)= relevantPixel_Y;




%     
% elseif ((nargin==2)&&(~isnumeric(roi_mode)))
% 
%     
% else
%     
%     
% end
% 
% curDir = pwd;
% cd(in.fileloc); % save masks in the T-series directory
% 
% if ((nargin==1)||(~isnumeric(roi_mode)))
%     d = dir('curMasks*.mat');
%     ind = length(d)+1;
%     if (ind == 1)
%         figure;imagesc(AV);colormap gray;
%         title('select background region');
%         NMask = roipoly;
%     else
%         load('curMasks1.mat','NMask');
%     end
%     save(sprintf('curMasks%d',ind),'masks','NMask','nMasks');
%     disp(sprintf('saved curMasks%d',ind));
% end
% cd(curDir);
% 
% %% Generate ratio signals from all regions of interest - aligned data
%    
% out = in;
% out.masks = masks;
% out.NMask = NMask;
% out.avSignal1 = zeros(nMasks,nframes);
% out.dSignal1 = zeros(nMasks,nframes);
% out.ratio = zeros(nMasks,nframes);
% out.dRatio = zeros(nMasks,nframes);
% 
% if(~isfield(in,'AV1'))
%     AV1 = squeeze(sum(in.ch1a,3))/nframes; % The average image for ch1
% %     AV2 = squeeze(sum(in.ch2a,3))/nframes; % The average image for ch1
%     out.AV1 = AV1;
% %     out.AV2 = AV2;
% end
% 
% 
% if exist('in.xml.linesperframe') && exist('in.xml.linesperframe') % Luis 13.11.2015
%     masked = zeros(in.xml.linesperframe,in.xml.pixperline);
% else
%     masked = zeros(str2double(in.xml.linesPerFrame),str2double(in.xml.pixelsPerLine));
% end
% smask = zeros(nMasks,1);
% for k = 1:nMasks
%     smask(k) = sum(sum(masks{k}));
%     masksi{k}= find(masks{k});
% end
% sNmask = sum(sum(NMask));
% Nmaski = find(NMask);
% 
% for ind = 1:nframes
%     A = double(squeeze(in.ch1a(:,:,ind)));
% %     B = double(squeeze(in.ch2a(:,:,ind)));
%     for k = 1:nMasks
% 
%         masked = A(masksi{k});
%         Nmasked = A(Nmaski);
%         out.avSignal1(k,ind) = sum(masked)./smask(k);%ms: summed signal in a ROI, normalized by ROI size
%         out.dSignal1(k,ind) = out.avSignal1(k,ind) - sum((Nmasked))./sNmask; %ms: background subtraction (by signal in background normalized by background ROI size)
%         
% %         masked = B(masksi{k});
% %         Nmasked = B(Nmaski);
% %         out.avSignal2(k,ind) = (sum(masked))./smask(k);
% %         out.dSignal2(k,ind) = out.avSignal2(k,ind) - (sum(Nmasked))./sNmask;
%     end
% end
% 
% for i = 1:nMasks
%     out.ratio(i,:) = out.avSignal1(i,:)%./out.avSignal2(i,:);
%     out.dRatio(i,:) = out.dSignal1(i,:)%./out.dSignal2(i,:);
% end
% 
% 

% cd(curDir)

